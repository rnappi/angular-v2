1 - Instalar o NodeJs para podermos utilizar o npm
2 - instalar o type script (npm install -g typescript)
3 - instalar o AngularCLI (npm install -g @angular/cli)

Dicas de Plugins para o Atom e VSCode
- AngularCLI que é a ferramenta oficial utilizada para criar projetos, componentes, services e etc
- Angular 2, 4 and (upcoming...) TypeScript, HTML Snippets for VS Code
- Atom OneDark Theme
- HTML Snippets
- vscode-icons

Criando um projeto Angular (utilizando o AngularCLI)
- Abrir o cmd no diretório desejado
- Criar o novo projeto (ng new <nome-projeto>)
- entrar no diretório do projeto e criar o servidor para podemos utilizar o localhost (ng serve)

Criando um componente (manualmente)
- criar um diretorio para o componente <nome-compoennte>
- criar o arquivo <nome-componente.component.ts> que deverá ter a classe pública do componente <NomeComponenteComponent>
- utilizar o decorator (a maneira que temos para passar informações adicionais para o compilador). Neste caso, vamos mostrar para o compilador que esta classe é um componente do Angular2, basta utilizar o decorator @Component({}) passando os meta-dados necessários.
- devemos importar a classe Component do '@angular/core' (import{Component} from '@angular/core')
- no componente, o código deve ser responsável apenas pela interação com o usuário. Nunca deve conter a lógica responsável por abter as informações que serão mostradas, isso é papael dos serviços

    Meta-dados do component
    - selector: nome da tag HTML que iremos criar para o componente
    - template: o HTML que será renderizado na página

    Incluindo o componente no módulo do Angular
    - importar o componente no arquivo resposnsavel pelo módulo (import {NovoComponente} from 'caminho relativo do arquivo ts')
    - declarations: a classe responsavel pelo componente <NomeCompoenteComponent>

OBS: o decorator só pode ser utilizado com typescript, ainda não foi implementado no ECMA script

Typescript
- todo arquivo .js é um .ts válido
- compilar o ts (tsc file.ts)
- possui um transpile para transformar os comandos do ES2015 em javascript puro
- tem suporte aos decorators
- variaveis tipadas, gerando errors de compilação e ajudando o desenvolvedor

Módulos (NGMODULE)
- Ajuda a organizar e modularizar a aplicação. Podemos ter diferentes componentes dentro do módulo, além de controlar quais recursos serão expostos para os outros módulos da aplicação
    
    Meta-dados do módulo
    - declarations: listamos todas as diretivas, componentes e pipes que iremos utilizar no módulo
    - imports: listamos outros módulos que serão utilizados dentro do módulo que estamos Criando
    - providers: listamos os serviços utilizados pelos componentes do módulo (scope global da aplicação)
    - bootstrap: é o componente que representa o container do projeto, e será instanciado ao inciarmos a aplicação. Esta informação existe apenas no modulo raiz da aplicação
    - exports: listamos quais declarações do módulo serão expostas para outros módulos

    Criar módulo com AngularCLI
    - ng g(generate) m(module) <nome-mmodulo>
    - os módulos de funcionalidades (feature modules) não importam o BrowserModule, e sim o CommonModule. Esta é a grande diferença entre os dois tipos de modulos
    
Templates
- É o html que representa a view dos nossos componentes
- Além das tags personalizadas, também podemos utilizar as tags padrão do HTML

Services e injeção de dependência
- o serviço é o responsável por obter as informações necessárias apartir de um servidor remoto
- criar o serviço ng g s(service) <nome-serviço>
- utilizamos a classe Http para realizar a comunicação entre a aplicação e o servidor

    Injeção de dependência
    - fazer com que o component receba uma instancia do serviço totalmente preparada para o uso de forma automática. Acabando com a necessidade de instanciarmos objetos em vários momentos
    - no angular, para que o serviço possa ser injetado, devemos utilizar o decorator @Injectable()
    - além do decorator, devemos incluir o serviço na lista de providers do módulo em que o componente que o utilizará faz parte
    - no angular, essa injeção de dependência só pode ser feita através do construtor

Property binding e Interpolation
- Databinding é a associação dos dados que estão no componente com o template HTML
    No Angular, existem 4 formas de fazer o data binding. São elas:
    - Interpolation {{valor}}
    - PropertyBinding [propertyName]="valor"
    - (evento)="handler" - utilizado para executar métodos do componente apartir da interação do usuário com o template
    - Two Way Databinding [(ngModel)]="proprety" utilizado para manter o template e o componente atualizados

Class e style binding (binding com css)
- São uma forma de property binding criado para trabalhar com css ao invés de propriedades
